- try

    nip4 ~/test.ws

  open imagewindow, often does not paint correctlyo

    seems to be a race

  trace of failed repaint

	looks like an unexpected thumbnail repaint is coming in half-way
	though the main window repaint, causing the pipeline to rebuild, and
	making the rest of the level0 tiles to be discarded

	why does the thumbnail repaint cause a request? you'd think that would
	just be served from cache



row_deselect: FIXME ... call matrix_deselect()
tilecache_init:
tilecache_build_pyramid:
	 2 pyr levels
	 0) 512 x 512
	 1) 256 x 256
tilecache_source_tiles_changed:
tilesource_background_load_worker: starting ...
tilesource_set_property: ACTIVE = FALSE
tilesource_set_property: VISIBLE = TRUE
tilesource_background_load_worker: ... done
tilesource_set_property: FALSECOLOUR = FALSE
tilesource_set_property: LOG = FALSE
tilesource_set_property: ICC = FALSE
tilesource_set_property: MODE = ((TilesourceMode) TILESOURCE_MODE_MULTIPAGE)
tilesource_background_load_worker: starting ...
tilesource_background_load_worker: ... done

tilecache_snapshot: scale = 1, x = 0, y = 0
  paint_rect left = 550, top = 461, width = 0, height = 0
tilecache_request: fetching left = 0, top = 0, width = 256, height = 256, z = 0
tilesource_request_tile: 0 x 0
  valid = 255
tilecache_compute_visibility: z = 0
viewport in level0 coordinates: left = 0, top = 0, width = 256, height = 256
  level 0, 1 tiles, 1 visible, 0 free
  level 1, 0 tiles, 0 visible, 0 free
  level 0 tiles:
    @ 0 x 0, 256 x 256, valid = 255, visible = 1, texture = 0x5d34010b1210
  level 1 tiles:
tilecache_snapshot: 3.573 ms

tilesource_background_load_done_cb: ... unreffing
tilesource_set_property: LOADED = TRUE
tilesource_set_property: VISIBLE = TRUE
tilesource_update_display:
tilesource_update_rgb:
tilecache_source_changed:
tilecache_build_pyramid:
	no geometry change, skipping pyr rebuild
tilecache_source_tiles_changed:
tilecache_source_changed:
tilecache_build_pyramid:
	no geometry change, skipping pyr rebuild
tilecache_source_tiles_changed:
tilesource_set_property: FALSECOLOUR = FALSE
tilesource_set_property: LOG = FALSE
tilesource_set_property: ICC = FALSE
tilesource_set_property: MODE = ((TilesourceMode) TILESOURCE_MODE_MULTIPAGE)
tilesource_background_load_done_cb: ... unreffing
tilesource_set_property: LOADED = TRUE
tilesource_set_property: VISIBLE = TRUE
tilesource_update_display:
tilesource_update_rgb:
tilecache_source_changed:
tilecache_build_pyramid:
	no geometry change, skipping pyr rebuild
tilecache_source_tiles_changed:
tilecache_source_changed:
tilecache_build_pyramid:
	no geometry change, skipping pyr rebuild
tilecache_source_tiles_changed:
tilesource_set_property: FALSECOLOUR = FALSE
tilesource_set_property: LOG = FALSE
tilesource_set_property: ICC = FALSE
tilesource_set_property: MODE = ((TilesourceMode) TILESOURCE_MODE_MULTIPAGE)

tilecache_snapshot: scale = 1.80273, x = 0, y = 0
  paint_rect left = 88, top = 0, width = 923, height = 923
tilecache_request: fetching left = 0, top = 0, width = 256, height = 256, z = 0
tilesource_request_tile: 0 x 0
  valid = 0
tilecache_request: fetching left = 256, top = 0, width = 256, height = 256, z = 0
tilesource_request_tile: 256 x 0
  valid = 0
tilecache_request: fetching left = 0, top = 256, width = 256, height = 256, z = 0
tilesource_request_tile: 0 x 256
  valid = 0
tilecache_request: fetching left = 256, top = 256, width = 256, height = 256, z = 0
tilesource_request_tile: 256 x 256
  valid = 0
tilecache_compute_visibility: z = 0
viewport in level0 coordinates: left = 0, top = 0, width = 512, height = 512
  level 0, 4 tiles, 1 visible, 3 free
  level 1, 0 tiles, 0 visible, 0 free
  level 0 tiles:
    @ 256 x 256, 256 x 256, valid = 0, visible = 0, texture = (nil)
    @ 0 x 256, 256 x 256, valid = 0, visible = 0, texture = (nil)
    @ 256 x 0, 256 x 256, valid = 0, visible = 0, texture = (nil)
    @ 0 x 0, 256 x 256, valid = 0, visible = 1, texture = 0x5d34010b1210
  level 1 tiles:
tilecache_snapshot: 13.936 ms

tilecache_snapshot: scale = 0.125, x = 0, y = 0
  paint_rect left = 143, top = 0, width = 64, height = 64
tilecache_request: fetching left = 0, top = 0, width = 512, height = 512, z = 1
tilesource_request_tile: 0 x 0
tilesource_update_display:
tilesource_update_rgb:
  valid = 0
tilecache_compute_visibility: z = 1
viewport in level0 coordinates: left = 0, top = 0, width = 512, height = 512
  level 0, 0 tiles, 0 visible, 0 free
  level 1, 1 tiles, 1 visible, 0 free
  level 0 tiles:
  level 1 tiles:
    @ 0 x 0, 512 x 512, valid = 0, visible = 1, texture = 0x5d33ffc65320
tilecache_snapshot: 4.511 ms

tilecache_source_collect: left = 0, top = 0, width = 512, height = 512, z = 1
tilesource_collect_tile: 0 x 0
  valid = 255
tilecache_source_collect: left = 0, top = 0, width = 512, height = 512, z = 1

tilecache_snapshot: scale = 0.125, x = 0, y = 0
  paint_rect left = 143, top = 0, width = 64, height = 64
tilecache_compute_visibility: z = 1
viewport in level0 coordinates: left = 0, top = 0, width = 512, height = 512
  level 0, 0 tiles, 0 visible, 0 free
  level 1, 1 tiles, 1 visible, 0 free
  level 0 tiles:
  level 1 tiles:
    @ 0 x 0, 512 x 512, valid = 255, visible = 1, texture = 0x5d33fe3ec960
tilecache_snapshot: 0.027 ms

tilecache_snapshot: scale = 1.80273, x = 0, y = 0
  paint_rect left = 88, top = 0, width = 923, height = 923
tilecache_request: fetching left = 0, top = 0, width = 256, height = 256, z = 0
tilesource_request_tile: 0 x 0
tilesource_update_display:
tilesource_update_rgb:
  valid = 0
tilecache_request: fetching left = 256, top = 0, width = 256, height = 256, z = 0
tilesource_request_tile: 256 x 0
  valid = 0
tilecache_request: fetching left = 0, top = 256, width = 256, height = 256, z = 0
tilesource_request_tile: 0 x 256
  valid = 0
tilecache_request: fetching left = 256, top = 256, width = 256, height = 256, z = 0
tilesource_request_tile: 256 x 256
  valid = 0
tilecache_compute_visibility: z = 0
viewport in level0 coordinates: left = 0, top = 0, width = 512, height = 512
  level 0, 4 tiles, 1 visible, 3 free
  level 1, 0 tiles, 0 visible, 0 free
  level 0 tiles:
    @ 256 x 256, 256 x 256, valid = 0, visible = 0, texture = (nil)
    @ 0 x 256, 256 x 256, valid = 0, visible = 0, texture = (nil)
    @ 256 x 0, 256 x 256, valid = 0, visible = 0, texture = (nil)
    @ 0 x 0, 256 x 256, valid = 0, visible = 1, texture = 0x5d34010b1210
  level 1 tiles:
tilecache_snapshot: 14.875 ms







# menu redesign

- remove unused widgets

- try:

	Matrix_build_item.Matrix_laplacian_item.action

	Matrix_build_item.Matrix_gaussian_item.action

  edit a cell and hit enter, lose the widgets, same happens in nip2

  do we need to define a Matrix_base member in Matrix_gaussian_item.action?

- SDFs (sdf, clamp, maxpair, minpair)

- magic kernel

- use vips_addalpha() operation

- remove use of cache (it's tilecache only now)

- prewitt and scharr edge detectors





- row reset doesn't always work

	try joanne's workspace ... need to be able to reset the image pair

	rowview_reset_menu() just runs model_clear_edited() on every sub-row

	in turn runs heapmodel_clear_edited()

  image replace from file usually won't reset properly since it rewrites the
  formula and there's nothing to reset

- could use file chooser widget in bm-workspaces, what would it look like?

- ^V in an imagewindow swaps the image without rewriting the formula, could
  we do something like that for replace from file?

	no, the result wouldn't be saved

- try

	nip4 ~/lady-orig.ws

  open A2, find A2.targets.image, right-click, replace from file, no file
  dialog appears

	what stops replace from file on a dirty row?

	see rowview_action(), there's no rhs->graphic

- check all batch mode flags

- try to save and restore image view scale and position

	this failed last time I tried :(

- ^C on a computed animated GIF is only copying the first page

	a limitation of gdk_texture_new_from_bytes()

- use "propagate-natural-width" to get better fit of imageview window?

	aim for max 600px on any axis

	pick an initial scale

	drawingarea makes itself that size

		we need to implement the sizing machinery, however that works

	propogate size

	remove shrink-to-fit

  see imagewindow_set_tilesource() and uncomment the call to
  imageui_set_bestfit() to work on this again

- still getting buffer ownership assert fails with libvips built in debug mode

- need preferences?

	or just remove it all

- iimage.h has:

	gboolean show_status;
	gboolean show_paintbox;
	gboolean show_convert;

  do we use these?

- investigate behaviour with updated iimage_update_heap() ... there will be
  quite a few cases which now fail (I expect)

- save as TIFF, pick a set of options which will fail (eg. deflate + float
  predictor), save, get error, fix options, save again, get:

	(nip4:3658140): VIPS-WARNING **: 12:51:27.408: ../libvips/iofuncs/object.c:1231: VipsForeignSaveTiffFile can only assign 'nickname' once
	(nip4:3658140): VIPS-WARNING **: 12:51:27.408: ../libvips/iofuncs/object.c:1231: VipsForeignSaveTiffFile can only assign 'description' once

## program

- restore scroll positions on menu path set

- in program window, search is cleared on refresh

	eg. search for is_Plot, click on it, list fills again

	not clear why this happens? we try to restore the search string
	and filter

## imagewindow

- open imageview window for groups? < and > could move up and down the group

	or disable < > ref for computed images?

	need a groupview widget

	it would need to make a model for every element in the group, then
	display a set of views

## ideas

- we have the css_name thing in several _refresh() methods ... should this be
  in the base class?

## program window

- get rid of

	 TOOL_DIA, TOOL_SEP

- for a click on a computed tool, could scroll to or highlight the text?

- find and find all could be in a "uses" pane on the right?

- drag in left to reorder tools and toolkits

	argh!

  I suppose we will need our own two-level tree view

## toolkit browser

- double-click in browse mode will add two pages with the same name

	harmless, but you get a warning

- often see

	view_dump(): 3 views
	0x5e14b821e120 Workspacedefs count=2
	0x5d40451c8110 Toolkitgroupview count=2
	0x5d40447a9790 Workspaceview count=1

  on shutdown

  could wsdefs and tkview be referencing workspaceview?

  maybe we are sometimes using VIPS_UNREF() rather than IDESTROY()?

## other

- remove the "open" button from the top bar? not very useful

- put a time delay on row label colour change -- stop the flashing

	we have vobject_refresh_queue(), but that does all views, we just
	want to delay colour changes

	maybe do a separate pass at the end of recomp that sets label colours?

	could use this to make parent/child colour change only show after a
	while ... might look better

- this fails:

	im_insertset main sub x y
		= foldr add_another main (zip2 x y)
	{
		add_another [x, y] im = insert x y sub im;
	}

  you have to do:

		add_another pos im
			= insert x y sub im
		{
			x = pos?0;
			y = pos?1;
		}

  strange!

- in a workspace do:

	x = [1, 2, 3]

  now ZF expressions which use x will stop working, eg.:

	[x * 2 :: x <- [1..]]

- syntax error in startup .def stops nip4 loading

- should we support

	A1.value + [1, 2, 3]

  ought to be easy and safe, though it's a lot of copy-paste

	maybe we can common-up some more code to make it easier?

  nip2 does it in the vector class, eg.

	A1 + Vector [10, 20, 30]

- should we wrap all vips8 operators? eg. could make

	vips_add a b = vips_call "add" [a, b] []

  as we do for vips7

	  not very useful? we'd lose optional args

  maybe:

	vips_add options a b = vips_call "add" [a, b] options

	x = vips_add [$uchar => true] y z

## widgets TODO

- still to do:

    (void) g_type_class_ref(TYPE_CLOCK);
    (void) g_type_class_ref(TYPE_GROUP);
    (void) g_type_class_ref(TYPE_REAL);
    (void) g_type_class_ref(TYPE_VECTOR);

  maybe skip clock

## plotting

- in plotdisplay_build_kplot()

	set ksmthtype to smooth a series (PLOT_STYLE_SPLINE) see
	kplot_attach_smooth()

		not really a spline, more like a blur, this would be better in
		libvips

	maybe use error bars plus thickness to draw a bar?

	leave it for now, not very important

## vips8

- vipsobject

	vo_new() could allocate the args array dynamically

	use vo_set_required_input() in the body of vo_call_fill_spine()

## rows

- add multi-select to file open?

	gtk makes it hard to support single and multiple file select in
	one action

- implement range select then drag

	awkward to do since select is on the model, not the view

	we'd need to make a floating column (not just a columnview) and
	reparent the rows to it

- new row type ... enter " (double quotes) as first character, then there's no
  need to terminate the string

  displayed slightly differently? maybe display all cells which are just a
  static string like this?

  maybe allow eg. "<span background=\"white\">hello</span>" too?

	formula isn't a great place to do this -- eg. "<function>" won't parse
	as markup

	a special graphical view widget for top-level strings would be better
