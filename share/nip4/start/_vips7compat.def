/* vips7 compat functions
 *
 * These are supposed to make old code which assumes vips7 work with vips8.
 */

// old vips7 builtin names
im_header_get_typeof = vips_header_typeof;
im_header_int = vips_header_int;
im_header_double = vips_header_double;
im_header_string = vips_header_string;
im_mask2vips = vips_image_from_matrix;
im_vips2mask = vips_matrix_from_image;

// vips7 wrappers
im_black x y b = vips_call9 "black" [x, y] [$bands => b];
im_fgrey x y = vips_call9 "grey" [x, y] [];

im_rot90 x = vips_call9 "rot" [x, "d90"] [];
im_rot180 x = vips_call9 "rot" [x, "d180"] [];
im_rot270 x = vips_call9 "rot" [x, "d270"] [];

im_clip2fmt x y = vips_call9 "cast" [x, y] [];
im_clip x = vips_call9 "cast" [x, "uchar"] [];
im_clip2us x = vips_call9 "cast" [x, "ushort"] [];
im_clip2s x = vips_call9 "cast" [x, "short"] [];
im_clip2f x = vips_call9 "cast" [x, "float"] [];

im_scale x = vips_call9 "scale" [x] [];

im_replicate in across down = vips_call9 "replicate" [in, across, down] [];

im_copy_set im t xr yr xo yo
	= vips_call9 "copy" [im] [
		$interpretation => t,
		$xres => xr,
		$yres => yr,
		$xoffset => xo,
		$yoffset => yo
	];

// im_copy_set_meta is implemented as a builtin

im_tile_cache_random in tile_width tile_height max_tiles
	= vips_call9 "tilecache" [in] [
		$tile_width => tile_width,
		$tile_height => tile_height,
		$max_tiles => max_tiles,
		$access => "random"
	];

im_recomb x y = vips_call9 "recomb" [x, y] [];
im_embed im t x y w h = vips_call9 "embed" [im, x, y, w, h] [$extend => t];
im_insert main sub x y = vips_call9 "insert" [main, sub, x, y] [$expand => true];
im_extract_area in x y w h = vips_call9 "crop" [in, x, y, w, h] [];
im_shrink in xfac yfac = vips_call9 "shrink" [in, xfac, yfac] [];
im_subsample in xfac yfac = vips_call9 "subsample" [in, xfac, yfac] [];

im_avg x = vips_call9 "avg" [x] [];
im_deviate x = vips_call9 "deviate" [x] [];
im_min x = vips_call9 "min" [x] [];
im_max x = vips_call9 "max" [x] [];
im_stats x = im_vips2mask (vips_call9 "stats" [x] []);
im_lintra_vec a in b = vips_call9 "linear" [in, a, b] [];
// nip2 matinv only works on Matrix objects, and returns a matrix object
im_matinv x = im_vips2mask (vips_call9 "matrixinvert" [x] []);
im_matmul in1 in2 = im_vips2mask (vips_call9 "matrixmultiply" [in1, in2] []);
im_abs x = vips_call9 "abs" [x] [];
im_sign x = vips_call9 "sign" [x] [];
im_rint x = vips_call9 "round" [x, "rint"] [];

im_notequal_vec in vec = vips_call9 "relational_const" [in, "noteq", vec] [];

im_maxpos in =
	(x, y)
{
	[value, x, y] = vips_call9 "max" [in] [
		$x => true,
		$y => true
	];
}

im_minpos in =
	(x, y)
{
	[value, x, y] = vips_call9 "min" [in] [
		$x => true,
		$y => true
	];
}


im_dE00_fromLab x y = vips_call9 "dE00" [x, y] [];

im_Lab2LabQ x = vips_call9 "Lab2LabQ" [x] [];
im_Lab2LabS x = vips_call9 "Lab2LabS" [x] [];
im_Lab2LCh x = vips_call9 "Lab2LCh" [x] [];
im_Lab2XYZ x = vips_call9 "Lab2XYZ" [x] [];
im_Lab2XYZ_temp x x0 y0 z0
	= vips_call9 "Lab2XYZ" [x] [
		$temp => [x0, y0, z0]
	];
im_LabQ2LabS x = vips_call9 "LabQ2LabS" [x] [];
im_LabQ2Lab x = vips_call9 "LabQ2Lab" [x] [];
im_LabS2LabQ x = vips_call9 "LabS2LabQ" [x] [];
im_LabS2Lab x = vips_call9 "LabS2Lab" [x] [];
im_LCh2UCS x = vips_call9 "LCh2CMC" [x] [];
im_LCh2Lab x = vips_call9 "LCh2Lab" [x] [];
im_scRGB2XYZ x = vips_call9 "scRGB2XYZ" [x] [];
im_scRGB2sRGB x = vips_call9 "scRGB2sRGB" [x] [];
im_scRGB2XYZ x = vips_call9 "scRGB2XYZ" [x] [];
im_UCS2LCh x = vips_call9 "CMC2LCh" [x] [];
im_XYZ2Lab x = vips_call9 "XYZ2Lab" [x] [];
im_XYZ2Lab_temp x x0 y0 z0
	= vips_call9 "XYZ2Lab" [x] [
		$temp => [x0, y0, z0]
	];
im_XYZ2Yxy x = vips_call9 "XYZ2Yxy" [x] [];
im_Yxy2XYZ x = vips_call9 "Yxy2XYZ" [x] [];

im_XYZ2UCS = im_LCh2UCS @ im_Lab2LCh @ im_XYZ2Lab;
im_sRGB2XYZ = im_scRGB2XYZ @ im_sRGB2scRGB;
im_XYZ2sRGB = im_scRGB2sRGB @ im_XYZ2scRGB;
im_Lab2UCS = im_LCh2UCS @ im_Lab2LCh;
im_UCS2Lab = im_LCh2Lab @ im_UCS2LCh;

im_icc_import x profile intent
	= vips_call9 "icc_import" [x] [
		$intent => intent,
		$input_profile => profile
	];

im_icc_import_embedded x intent
	= vips_call9 "icc_import" [x] [
		$intent => intent,
		$embedded => true
	];

im_icc_export_depth x depth profile intent
	= vips_call9 "icc_export" [x] [
		$depth => depth,
		$intent => intent,
		$output_profile => profile
	];

im_icc_transform x input_profile output_profile intent
	= vips_call9 "icc_transform" [x, output_profile] [
		$intent => intent,
		$input_profile => output_profile
	];

im_histnD x bins = vips_call9 "hist_find_ndim" [x] [
	$bins => bins
];

im_histplot in = vips_call9 "hist_plot" [in] [];

im_insertset main sub x y
	= foldr add_another main (zip2 x y)
{
	add_another pos im
		= insert x y sub im
	{
		x = pos?0;
		y = pos?1;
	}
}

// use im_vips2mask, not to_matrix, since to_matrix does not preserve .scale
im_gauss_dmask sigma min_amp
	= im_vips2mask matrix
{
	matrix = vips_call9 "gaussmat" [sigma, min_amp] [
		$precision => "float"
	];
}

im_gauss_imask sigma min_amp
	= im_vips2mask matrix
{
	matrix = vips_call9 "gaussmat" [sigma, min_amp] [
		$precision => "integer"
	];
}

im_gauss_dmask_sep sigma min_amp
	= im_vips2mask matrix
{
	matrix = vips_call9 "gaussmat" [sigma, min_amp] [
		$precision => "float",
		$separable => true
	];
}

im_gauss_imask_sep sigma min_amp
	= im_vips2mask matrix
{
	matrix = vips_call9 "gaussmat" [sigma, min_amp] [
		$precision => "integer",
		$separable => true
	];
}

im_read_dmask filename
	= im_vips2mask matrix
{
        matrix = vips_call9 "matrixload" [filename] [];
}

im_conv in matrix
	= vips_call9 "conv" [in, matrix] [
		$precision => "integer"
	];

im_conv_f in matrix
	= vips_call9 "conv" [in, matrix] [
		$precision => "float"
	];

im_convsep in matrix
	= vips_call9 "convsep" [in, matrix] [
		$precision => "integer"
	];

im_convsep_f in matrix
	= vips_call9 "convsep" [in, matrix] [
		$precision => "float"
	];

im_rotate_dmask45 matrix
	= im_vips2mask matrix'
{
	matrix' = vips_call9 "rot45" [matrix] [
	];
}

im_log_dmask sigma min_amp
	= im_vips2mask matrix
{
	matrix = vips_call9 "logmat" [sigma, min_amp] [
		$precision => "float"
	];
}

im_log_imask sigma min_amp
	= im_vips2mask matrix
{
	matrix = vips_call9 "logmat" [sigma, min_amp] [
		$precision => "integer"
	];
}

im_sharpen in mask_size x1 y2 y3 m1 m2
	= vips_call9 "sharpen" [in] [
		$sigma => mask_size / 4,
		$x1 => x1,
		$y2 => y2,
		$y3 => y3,
		$m1 => m1,
		$m2 => m2
	];

im_rank in xsize ysize n
	= vips_call9 "rank" [in, xsize, ysize, n] [
	];

im_rank_image in index
	= vips_call9 "bandrank" [in] [
		$index => index
	];

im_dilate in mask
	= vips_call9 "morph" [in, mask, "dilate"] [
	];

im_erode in mask
	= vips_call9 "morph" [in, mask, "erode"] [
	];

im_flt_image_freq in type p1 p2 p3 p4 p5
	= vips_call9 "freqmult" [in, mask] []
{
	width = get_header "width" in;
	height = get_header "height" in;
	mask = im_create_fmask width height type p1 p2 p3 p4 p5;
}

im_fractsurf size dimension
	= vips_call9 "fractsurf" [size, size, dimension] [
	  ];

im_create_fmask width height type p1 p2 p3 p4 p5
	= vips_call9 "mask_ideal" [width, height, p1] [
	  ], type == 0
	= vips_call9 "mask_ideal" [width, height, p1] [
		$reject => true
	  ], type == 1
	= vips_call9 "mask_butterworth" [width, height, p1, p2, p3] [
	  ], type == 2
	= vips_call9 "mask_butterworth" [width, height, p1, p2, p3] [
		$reject => true
	  ], type == 3
	= vips_call9 "mask_gaussian" [width, height, p1, p2] [
	  ], type == 4
	= vips_call9 "mask_gaussian" [width, height, p1, p2] [
		$reject => true
	  ], type == 5
	= vips_call9 "mask_ideal_ring" [width, height, p1, p2] [
	  ], type == 6
	= vips_call9 "mask_ideal_ring" [width, height, p1, p2] [
		$reject => true
	  ], type == 7
	= vips_call9 "mask_butterworth_ring" [width, height, p1, p2, p3, p4] [
	  ], type == 8
	= vips_call9 "mask_butterworth_ring" [width, height, p1, p2, p3, p4] [
		$reject => true
	  ], type == 9
	= vips_call9 "mask_gaussian_ring" [width, height, p1, p2, p3] [
	  ], type == 10
	= vips_call9 "mask_gaussian_ring" [width, height, p1, p2, p3] [
		$reject => true
	  ], type == 11
	= vips_call9 "mask_ideal_band" [width, height, p1, p2, p3] [
	  ], type == 12
	= vips_call9 "mask_ideal_band" [width, height, p1, p2, p3] [
		$reject => true
	  ], type == 13
	= vips_call9 "mask_butterworth_band" [width, height, p1, p2, p3, p4, p5] [
	  ], type == 14
	= vips_call9 "mask_butterworth_band" [width, height, p1, p2, p3, p4, p5] [
		$reject => true
	  ], type == 15
	= vips_call9 "mask_gaussian_band" [width, height, p1, p2, p3, p4] [
	  ], type == 16
	= vips_call9 "mask_gaussian_band" [width, height, p1, p2, p3, p4] [
		$reject => true
	  ], type == 17
	= vips_call9 "mask_fractal" [width, height, p1] [
	  ], type == 18
	= error "bad mask type";

im_rotquad in
	= vips_call9 "wrap" [in] [
		$x => width / 2,
		$y => height / 2
	  ]
{
	width = get_header "width" in;
	height = get_header "height" in;
}

im_falsecolour in
	= vips_call9 "falsecolour" [in] [
	];

im_stdif in a m0 b s0 xw yw
	= vips_call9 "stdif" [in, xw, yw] [
		$s0 => s0,
		$b => b,
		$m0 => m0,
		$a => a
	];

im_histgr in band_number
	= vips_call9 "hist_find" [in] [
		$band => band_number
	];

im_histcum in
	= vips_call9 "hist_cum" [in] [
	];

im_histnorm in
	= vips_call9 "hist_norm" [in] [
	];

im_histeq = im_histnorm @ im_histcum;

im_histspec in ref
	= vips_call9 "hist_match" [a, b] [
	]
{
	a = im_histeq in;
	b = im_histeq ref;
}

im_hist_indexed value index
	= vips_call9 "hist_find_indexed" [index, value] [
	];

im_spcor in1 in2
	= vips_call9 "spcor" [in1, in2] [
	];

im_fastcor in1 in2
	= vips_call9 "fastcor" [in1, in2] [
	];

im_insert_noexpand in sub x y
	= vips_call9 "insert" [in, sub, x, y] [
	];

im_identity nbands
	= vips_call9 "identity" [] [
		$bands => nbands
	];

im_identity_ushort nbands size
	= vips_call9 "identity" [] [
		$bands => nbands,
		$ushort => true,
		$size => size
	];

im_profile in direction
	= im_clip2us columns, direction == 0
	= im_clip2us rows
{
	[columns, rows] = vips_call9 "profile" [in] [
	];
}

im_blend cond in1 in2
	= vips_call9 "ifthenelse" [cond, in1, in2] [
		$blend => true
	];

im_text text font width alignment dpi
	= vips_call9 "text" [text] [
		$font => font,
		$width => width,
		$align => alignment,
		$dpi => dpi
	];

im_grey xsize ysize
	= vips_call9 "grey" [xsize, ysize] [
		$uchar => true
	];

im_eye xsize ysize factor
	= vips_call9 "eye" [xsize, ysize] [
		$factor => factor,
		$uchar => true
	];

im_zone size
	= vips_call9 "zone" [size, size] [
		$uchar => true
	];

im_extract_bands input band nbands
	= vips_call9 "extract_band" [input, band] [
		$n => nbands
	];

im_maplut in lut
	= vips_call9 "maplut" [in, lut] [
	];

im_invertlut measures lut_size
	= vips_call9 "invertlut" [measures] [
		$size => lut_size
	];

im_make_xy xsize ysize
	= vips_call9 "xyz" [xsize, ysize] [
	];

im_fwfft in
	= vips_call9 "fwfft" [in] [
	];

im_invfftr in
	= vips_call9 "invfft" [in] [
		$real => true
	];

im_c2amph in
	= vips_call9 "complex" [in, "polar"] [
	];

im_c2rect in
	= vips_call9 "complex" [in, "rect"] [
	];

im_buildlut mask
	= vips_call9 "buildlut" [mask] [
	];

im_tone_build_range in_max out_max Lb Lw Ps Pm Ph S M H
	= vips_call9 "tonelut" [] [
		$in_max => in_max,
		$out_max => out_max,
		$Lb => Lb,
		$Lw => Lw,
		$Ps => Ps,
		$Pm => Pm,
		$Ph => Ph,
		$S => S,
		$M => M,
		$H => H
	];

// this was never ported to vips8 and is a bit useless
im_zerox in flag = error "im_zerox: not implemented";

im_cntlines in dir
	= vips_call9 "countlines" [in, dir] [
	];

im_flipver in
	= vips_call9 "flip" [in, "vertical"] [
	];

im_fliphor in
	= vips_call9 "flip" [in, "horizontal"] [
	];

im_gbandjoin in
	= vips_call9 "bandjoin" [in] [
	];

im_affinei_all in interpolate a b c d dx dy
	= vips_call9 "affine" [in, [a, b, c, d]] [
		$interpolate => interpolate,
		$idx => dx,
		$idy => dy
	];

im_project in
	= vips_call9 "project" [in] [
	];

im_match_linear ref sec xref1 yref1 xsec1 ysec1 xref2 yref2 xsec2 ysec2
	= vips_call9 "match" [ref, sec,
		xref1, yref1, xsec1, ysec1,
		xref2, yref2, xsec2, ysec2] [
	];

im_match_linear_search ref sec
	xref1 yref1 xsec1 ysec1
	xref2 yref2 xsec2 ysec2
	hwindowsize hsearchsize
	= vips_call9 "match" [ref, sec,
		xref1, yref1, xsec1, ysec1,
		xref2, yref2, xsec2, ysec2] [
		$hwindow => hwindowsize,
		$harea => hsearchsize,
		$search => true
	];

im_lrmerge ref sec dx dy mwidth
	= vips_call9 "merge" [ref, sec, "horizontal", dx, dy] [
		$mblend => mwidth
	];

im_tbmerge ref sec dx dy mwidth
	= vips_call9 "merge" [ref, sec, "vertical", dx, dy] [
		$mblend => mwidth
	];

im_lrmosaic ref sec bandno xr yr xs ys
	halfcorrelation halfarea balancetype mwidth
	= vips_call9 "mosaic" [ref, sec, "horizontal", xr, yr, xs, ys] [
		$hwindow => halfcorrelation,
		$harea => halfarea,
		$mblend => mwidth
	];

im_tbmosaic ref sec bandno xr yr xs ys
	halfcorrelation halfarea balancetype mwidth
	= vips_call9 "mosaic" [ref, sec, "vertical", xr, yr, xs, ys] [
		$hwindow => halfcorrelation,
		$harea => halfarea,
		$mblend => mwidth
	];

im_lrmosaic1 ref sec bandno
	xr1 yr1 xs1 ys1
	xr2 yr2 xs2 ys2
	halfcorrelation halfarea balancetype mwidth
	= vips_call9 "mosaic1" [ref, sec, "horizontal",
		xr1, yr1, xs1, ys1,
		xr2, yr2, xs2, ys2
	] [
		$hwindow => halfcorrelation,
		$harea => halfarea,
		$mblend => mwidth
	];

im_tbmosaic1 ref sec bandno
	xr1 yr1 xs1 ys1
	xr2 yr2 xs2 ys2
	halfcorrelation halfarea balancetype mwidth
	= vips_call9 "mosaic1" [ref, sec, "vertical",
		xr1, yr1, xs1, ys1,
		xr2, yr2, xs2, ys2
	] [
		$hwindow => halfcorrelation,
		$harea => halfarea,
		$mblend => mwidth
	];

im_lrmerge1 ref sec
	xr1 yr1 xs1 ys1
	xr2 yr2 xs2 ys2
	mwidth
	= vips_call9 "mosaic1" [ref, sec, "horizontal",
		xr1, yr1, xs1, ys1,
		xr2, yr2, xs2, ys2
	] [
		$mblend => mwidth
	];

im_tbmerge1 ref sec
	xr1 yr1 xs1 ys1
	xr2 yr2 xs2 ys2
	mwidth
	= vips_call9 "mosaic1" [ref, sec, "vertical",
		xr1, yr1, xs1, ys1,
		xr2, yr2, xs2, ys2
	] [
		$mblend => mwidth
	];

im_global_balancef in gamma
	= vips_call9 "globalbalance" [in] [
		$gamma => gamma
	];

im_global_balance in gamma
	= vips_call9 "globalbalance" [in] [
		$gamma => gamma,
		$int_output => true
	];

im_system_image in in_format out_format command
	= vips_call9 "system" [command] [
		$in => [in],
		$out => true,
		$in_format => in_format,
		$out_format => out_format,
		$log => true
	];

im_grid input tile_height across down
	= vips_call9 "grid" [input, tile_height, across, down] [];

im_copy in = vips_call9 "copy" [in] [];
im_cache in tile_width tile_height max_tiles
	= vips_call9 "tilecache" [in] [
		$tile_width => tile_width,
		$tile_height => tile_height,
		$max_tiles => max_tiles,
		$threaded => true
	];

im_flood_blob_copy in start_x start_y ink
	= vips_call9 "draw_flood" [in, ink, start_x, start_y] [
		$equal => true
	];
im_draw_flood_blob = im_flood_blob_copy;

im_draw_flood in start_x start_y ink
        = vips_call9 "draw_flood" [in, ink, start_x, start_y] [
                $equal => false
        ];

im_segment test
        = vips_call9 "labelregions" [test] [
                $segments => true
	];

im_transform in params ipol wrap
	= vips_call9 "quadratic" [in, params] [
        ];


// add a lot more!

