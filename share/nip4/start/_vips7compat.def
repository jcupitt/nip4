/* vips7 compat functions
 *
 * These are supposed to make old code which assumes vips7 work with vips8.
 */

// old vips7 builtin names
im_header_get_typeof = vips_header_typeof;
im_header_int = vips_header_int;
im_header_double = vips_header_double;
im_header_string = vips_header_string;
im_mask2vips = vips_image_from_matrix;

// this causes terrible problems! no idea why
im_vips2mask = vips_matrix_from_image;

// vips7 wrappers
im_black x y b = vips_call "black" [x, y] [$bands => b];
im_fgrey x y = vips_call "grey" [x, y] [];

im_rot90 x = vips_call "rot" [x, "d90"] [];
im_rot180 x = vips_call "rot" [x, "d180"] [];
im_rot270 x = vips_call "rot" [x, "d270"] [];

im_clip2fmt x y = vips_call "cast" [x, y] [];
im_clip x = vips_call "cast" [x, "uchar"] [];
im_clip2us x = vips_call "cast" [x, "ushort"] [];
im_clip2s x = vips_call "cast" [x, "short"] [];
im_clip2f x = vips_call "cast" [x, "float"] [];
im_copy_set im t xr yr xo yo
	= vips_call "copy" [im] [
		$interpretation => t,
		$xres => xr,
		$yres => yr,
		$xoffset => xo,
		$yoffset => yo
	];

im_recomb x y = vips_call "recomb" [x, y] [];
im_embed im t x y w h = vips_call "embed" [im, x, y, w, h] [$extend => t];
im_insert main sub x y = vips_call "insert" [main, sub, x, y] [$expand => true];
im_extract_area in x y w h = vips_call "crop" [in, x, y, w, h] [];

im_avg x = vips_call "avg" [x] [];
im_min x = vips_call "min" [x] [];
im_max x = vips_call "max" [x] [];
im_lintra_vec a in b = vips_call "linear" [in, a, b] [];
// nip2 matinv only works on Matrix objects, and returns a matrix object
im_matinv x = im_vips2mask (vips_call "matrixinvert" [x] []);

im_dE00_fromLab x y = vips_call "dE00" [x, y] [];

im_Lab2LabQ x = vips_call "Lab2LabQ" [x] [];
im_Lab2LabS x = vips_call "Lab2LabS" [x] [];
im_Lab2LCh x = vips_call "Lab2LCh" [x] [];
im_Lab2XYZ x = vips_call "Lab2XYZ" [x] [];
im_Lab2XYZ_temp x x0 y0 z0
	= vips_call "Lab2XYZ" [x] [
		$temp => [x0, y0, z0]
	];
im_LabQ2LabS x = vips_call "LabQ2LabS" [x] [];
im_LabQ2Lab x = vips_call "LabQ2Lab" [x] [];
im_LabS2LabQ x = vips_call "LabS2LabQ" [x] [];
im_LabS2Lab x = vips_call "LabS2Lab" [x] [];
im_LCh2UCS x = vips_call "LCh2CMC" [x] [];
im_LCh2Lab x = vips_call "LCh2Lab" [x] [];
im_scRGB2XYZ x = vips_call "scRGB2XYZ" [x] [];
im_sRGB2scRGB x = vips_call "sRGB2scRGB" [x] [];
im_scRGB2sRGB x = vips_call "scRGB2sRGB" [x] [];
im_scRGB2XYZ x = vips_call "scRGB2XYZ" [x] [];
im_UCS2LCh x = vips_call "CMC2LCh" [x] [];
im_XYZ2Lab x = vips_call "XYZ2Lab" [x] [];
im_XYZ2Lab_temp x x0 y0 z0
	= vips_call "XYZ2Lab" [x] [
		$temp => [x0, y0, z0]
	];
im_XYZ2Yxy x = vips_call "XYZ2Yxy" [x] [];
im_Yxy2XYZ x = vips_call "Yxy2XYZ" [x] [];

im_XYZ2UCS = im_LCh2UCS @ im_Lab2LCh @ im_XYZ2Lab;
im_sRGB2XYZ = im_scRGB2XYZ @ im_sRGB2scRGB;
im_XYZ2sRGB = im_scRGB2sRGB @ im_XYZ2scRGB;
im_Lab2UCS = im_LCh2UCS @ im_Lab2LCh;
im_UCS2Lab = im_LCh2Lab @ im_UCS2LCh;

im_icc_import x profile intent
	= vips_call "icc_import" [x] [
		$intent => intent,
		$input_profile => profile
	];
im_icc_export_depth x depth profile intent
	= vips_call "icc_export" [x] [
		$depth => depth,
		$intent => intent,
		$output_profile => profile
	];
im_icc_transform x input_profile output_profile intent
	= vips_call "icc_transform" [x, output_profile] [
		$intent => intent,
		$input_profile => output_profile
	];

im_histnD x bins = vips_call "hist_find_ndim" [x] [
	$bins => bins
];

im_insertset main sub x y
	= foldr add_another main (zip2 x y)
{
	add_another pos im
		= insert x y sub im
	{
		x = pos?0;
		y = pos?1;
	}
}

// use im_vips2mask, not to_matrix, since to_matrix does not preserve .scale
im_gauss_dmask sigma min_amp
	= im_vips2mask matrix
{
	matrix = vips_call "gaussmat" [sigma, min_amp] [
		$precision => "float"
	];
}

im_gauss_imask sigma min_amp
	= im_vips2mask matrix
{
	matrix = vips_call "gaussmat" [sigma, min_amp] [
		$precision => "integer"
	];
}

im_gauss_dmask_sep sigma min_amp
	= im_vips2mask matrix
{
	matrix = vips_call "gaussmat" [sigma, min_amp] [
		$precision => "float",
		$separable => true
	];
}

im_gauss_imask_sep sigma min_amp
	= im_vips2mask matrix
{
	matrix = vips_call "gaussmat" [sigma, min_amp] [
		$precision => "integer",
		$separable => true
	];
}

im_conv in matrix
	= vips_call "conv" [in, matrix] [
		$precision => "integer"
	];

im_conv_f in matrix
	= vips_call "conv" [in, matrix] [
		$precision => "float"
	];

im_convsep in matrix
	= vips_call "convsep" [in, matrix] [
		$precision => "integer"
	];

im_convsep_f in matrix
	= vips_call "convsep" [in, matrix] [
		$precision => "float"
	];

im_rotate_dmask45 matrix
	= im_vips2mask matrix'
{
	matrix' = vips_call "rot45" [matrix] [
	];
}

im_sharpen in mask_size x1 y2 y3 m1 m2
	= vips_call "sharpen" [in] [
		$sigma => mask_size / 4,
		$x1 => x1,
		$y2 => y2,
		$y3 => y3,
		$m1 => m1,
		$m2 => m2
	];

im_rank in xsize ysize n
	= vips_call "rank" [in, xsize, ysize, n] [
	];

im_rank_image in index
	= vips_call "bandrank" [in] [
		$index => index
	];

im_dilate in mask
	= vips_call "morph" [in, mask, "dilate"] [
	];

im_erode in mask
	= vips_call "morph" [in, mask, "erode"] [
	];

im_flt_image_freq in type p1 p2 p3 p4 p5
	= vips_call "freqmult" [in, mask] []
{
	xsize = get_header "width" in;
	ysize = get_header "height" in;

	mask
		= vips_call "mask_ideal" [width, height, p1] [
		  ], type == 0
		= vips_call "mask_ideal" [width, height, p1] [
			$reject => true
		  ], type == 1
		= vips_call "mask_butterworth" [width, height, p1, p2, p3] [
		  ], type == 2
		= vips_call "mask_butterworth" [width, height, p1, p2, p3] [
			$reject => true
		  ], type == 3
		= vips_call "mask_gaussian" [width, height, p1, p2] [
		  ], type == 4
		= vips_call "mask_gaussian" [width, height, p1, p2] [
			$reject => true
		  ], type == 5
		= vips_call "mask_ideal_ring" [width, height, p1, p2] [
		  ], type == 6
		= vips_call "mask_ideal_ring" [width, height, p1, p2] [
			$reject => true
		  ], type == 7
		= vips_call "mask_butterworth_ring" [width, height, p1, p2, p3, p4] [
		  ], type == 8
		= vips_call "mask_butterworth_ring" [width, height, p1, p2, p3, p4] [
			$reject => true
		  ], type == 9
		= vips_call "mask_gaussian_ring" [width, height, p1, p2, p3] [
		  ], type == 10
		= vips_call "mask_gaussian_ring" [width, height, p1, p2, p3] [
			$reject => true
		  ], type == 11
		= vips_call "mask_ideal_band" [width, height, p1, p2, p3] [
		  ], type == 12
		= vips_call "mask_ideal_band" [width, height, p1, p2, p3] [
			$reject => true
		  ], type == 13
		= vips_call "mask_butterworth_band" [width, height, p1, p2, p3, p4] [
		  ], type == 14
		= vips_call "mask_butterworth_band" [width, height, p1, p2, p3, p4] [
			$reject => true
		  ], type == 15
		= vips_call "mask_gaussian_band" [width, height, p1, p2, p3] [
		  ], type == 16
		= vips_call "mask_gaussian_band" [width, height, p1, p2, p3] [
			$reject => true
		  ], type == 17
		= vips_call "mask_fractal" [width, height, p1] [
		  ], type == 18
		= error "bad mask type";
}

// add a lot more!

